// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  blocked        Boolean   @default(false)
  created_at     DateTime
  email          String    @unique
  email_verified Boolean
  family_name    String
  given_name     String
  last_ip        String
  last_login     DateTime
  logins_count   Int
  name           String
  nickname       String
  phone_number   String
  phone_verified Boolean   @default(false)
  picture        String
  updated_at     DateTime
  user_id        String    @unique
  username       String    @unique
  follower       Follows[] @relation("follower")
  following      Follows[] @relation("following")
}

model Follows {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  followedBy   User   @relation("follower", fields: [followedById], references: [id])
  followedById String @unique
  following    User   @relation("following", fields: [followingId], references: [id])
  followingId  String
}

model Post {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  title         String @unique
  body          String @unique
  slug          String @unique
  description   String @unique
  featuredImage String @unique
  category1 Category
  category2 Category
  tags TagsOnPost
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  schema Json @unique
  author UserOnPosts
  status Status @default(PUBLISHED)
  like Like @default(NONE)
  feedback Feedback[] @default([])
  comments CommentsOnPost
}

model Page {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  title         String @unique
  body          String @unique
  slug          String @unique
  description   String @unique
  featuredImage String @unique
  tags TagsOnPage
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  schema Json @unique
  author UserOnPages
  status Status @default(PUBLISHED)
  like Like @default(NONE)
  feedback Feedback[] @default([])
  comments CommentsOnPage
}

model Category {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  slug String @unique
  description String @unique
  logo String @unique
}

model TagsOnPost {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  post Post
  tags Tag[] @default([])
}

model TagsOnPage {
 id            String @id @default(auto()) @map("_id") @db.ObjectId
 page Page
 tags Tag[] @default([])
}

model TagsOnBlog {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  blog Blog
  tags Tag[] @default([])
}

model Tag {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  slug String @unique
  description String @unique
  logo String @unique
}

model UserOnPost {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  user User
  post Post
}

model UserOnPage {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  user User
  page Page
}

model UserOnBlog {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  user User
  blog Blog
}

model Feedback {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  user User
  feedback String
  rating Int
}

model CommentsOnPost {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  comments Comment[]
}

model CommentOnBlog {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  comments Comment[]
}

model Comment {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  user User
  repliedTo Comment? @relation("repliedTo")
}

enum Like {
  LIKED
  DISLIKED
  NONE
}

enum Status {
  PUBLISHED
  DRAFT
}
