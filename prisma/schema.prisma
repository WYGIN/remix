// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  blocked        Boolean   @default(false)
  created_at     DateTime
  email          String    @unique
  email_verified Boolean
  family_name    String
  given_name     String
  last_ip        String
  last_login     DateTime
  logins_count   Int
  name           String
  nickname       String
  phone_number   String
  phone_verified Boolean   @default(false)
  picture        String
  updated_at     DateTime
  user_id        String    @unique
  username       String    @unique
  follower       Follows[] @relation("follower")
  following      Follows[] @relation("following")
  profile Profile @relation(fields: [profileId], references: [id])
  profileId String @db.ObjectId @unique
  role Role @default(USER)
} 

model Follows {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  followedBy   User   @relation("follower", fields: [followedById], references: [id])
  followedById String @unique
  following    User   @relation("following", fields: [followingId], references: [id])
  followingId  String
  @@unique([followedById, followingId])
}

model Post {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  title         String @unique
  body          String @unique
  slug          String @unique
  description   String @unique
  featuredImage String @unique
  taxonomy Taxonomy
  tags TagsOnPost
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  schema Json @unique
  author PostsOnProfile
  status Status @default(PUBLISHED)
  like Like @default(NONE)
  feedback Feedback[]
  comments CommentsOnPost
}

model Page {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  title         String @unique
  body          String @unique
  slug          String @unique
  description   String @unique
  featuredImage String @unique
  tags TagsOnPage
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  schema Json @unique
  author PagesOnProfile
  status Status @default(PUBLISHED)
  like Like @default(NONE)
  feedback Feedback[]
}

model Blog {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  title         String @unique
  body          String @unique
  slug          String @unique
  description   String @unique
  featuredImage String @unique
  tags TagsOnBlog
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  schema Json @unique
  author BlogsOnProfile
  status Status @default(PUBLISHED)
  like Like @default(NONE)
  feedback Feedback[]
  comments CommentsOnBlog
}

model Taxonomy {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  category1 Category @relation("primary category", fields: [category1Id], references: [id])
  category1Id String @db.ObjectId
  category2 Category @relation("secondary category", fields: [category2Id], references: [id])
  category2Id String @db.ObjectId
  postsOnTaxonomy PostsOnTaxonomy?
  
  @@unique([category1Id, category2Id])
}

model Category {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  slug String @unique
  description String @unique
  logo String @unique
  taxonomy1 Taxonomy[] @relation("primary category")
  taxonomy2 Taxonomy[] @relation("secondary category")
}

model Profile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  bio String @unique
  postsCreated PostsOnProfile?
  pagesCreated PagesOnProfile?
  blogsCreated BlogsOnProfile?
  postsContributed ContributedOnPostsByProfile?
  pagesContributed ContributedOnPagesByProfile?
  blogsContributed ContributedOnBlogsByProfile?
  tagsCreated TagsCreatedByProfile?
  taxonomiesCreated TaxonomiesCreatedByProfile?
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
  socialAccounts SocialAccountsOnProfile?
}

model Publication {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  slug String @unique
  description String @unique
  logo String @unique
  roles RolesByPublication?
  posts PostsByPublication?
}

model Header {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  items HeaderItem[]
}

model Footer {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  items FooterItem[]
}

model HeaderItem {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  slug String @unique
  description String? @unique
  items HeaderItem[] @relation("child items")
}

model FooterItem {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  slug String @unique
  description String? @unique
  items FooterItem[] @relation("child items")
}

model PostsByPublication {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  publication Publication @relation(fields: [publicationId], references: [id])
  publicationId String @db.ObjectId @unique
  posts Post[]
}

model PublicationsByProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id])
  profileId String @db.ObjectId @unique
  publications Publication[]
}

model RolesByPublication {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  roles RolesOnPublicationByProfile[]
}

model RolesOnPublicationByProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id])
  profileId String @db.ObjectId @unique
  publication Publication @relation(fields: [publicationId], references: [id])
  publicationId String @db.ObjectId @unique
  role Role @default(EDITOR)
  @@unique([profileId, publicationId])
}

model PostsOnProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profile Profile
  posts Post[]
}

model PagesOnProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profile Profile
  pages Page[]
}

model BlogsOnProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profile Profile
  blogs Blog[]
}

model ContributedOnPostsByProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profile Profile
  posts Post[]
}

model ContributedOnPagesByProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profile Profile
  pages Page[]
}

model ContributedOnBlogsByProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profile Profile
  blogs Blog[]
}

model TagsOnPost {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  post Post
  tags Tag[]
}

model TagsOnPage {
 id            String @id @default(auto()) @map("_id") @db.ObjectId
 page Page
 tags Tag[]
}

model TagsOnBlog {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  blog Blog
  tags Tag[]
}

model TagsCreatedByProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profile Profile
  tags Tag[]
}

model TaxonomiesCreatedByProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profile Profile
  taxonomies Taxonomy[]
}

model Tag {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  slug String @unique
  description String @unique
  logo String @unique
}

model UserOnPost {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  user User
  post Post
}

model UserOnPage {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  user User
  page Page
}

model UserOnBlog {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  user User
  blog Blog
}

model Feedback {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  user User
  feedback String
  rating Int
}

model CommentsOnPost {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  post Post @relation(fields: [postId], references: [id])
  postId String @db.ObjectId @unique
  comments Comment[]
}

model CommentsOnBlog {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  blog Blog @relation(fields: [blogId], references: [id])
  blogId String @db.ObjectId @unique
  comments Comment[]
}

model Comment {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  user User
  repliedTo Comment? @relation("repliedTo")
}

model PostsOnTaxonomy {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  taxonomy Taxonomy @relation(fields: [taxonomyId], references: [id])
  taxonomyId String @db.ObjectId @unique
  posts Post[]
}

model SocialAccountsOnProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id])
  profileId String @db.ObjectId @unique
  socialAccounts SocialAccount[]
}

model SocialAccount {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  socialPlatform SocialPlatform
  username String
  @@unique([socialPlatform, username])
}

enum SocialPlatform {
  YOUTUBE
  INSTAGRAM
  GITHUB
  FACEBOOK
  TWITTER
}

enum Role {
  USER
  EDITOR
  CONTRIBUTER
  SPONSOR
  ADMIN
  OWNER
}

enum Like {
  LIKED
  DISLIKED
  NONE
}

enum Status {
  PUBLISHED
  DRAFT
}
